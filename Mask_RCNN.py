# -*- coding: utf-8 -*-
"""Shashank_ CV_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQHSdEVD-SlDtrP5TPSxzprslJ_vzHVx
"""

from google.colab import drive
drive.mount('/content/gdrive',force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# 
# # Install pycocotools
# git clone https://github.com/cocodataset/cocoapi.git
# cd cocoapi/PythonAPI
# python setup.py build_ext install


from PIL import Image
image_directory = "/content/gdrive/My Drive/epfl_lab/20140804_160621_00/"
Image.open(image_directory + "rgb000035.png")

Image.open(image_directory + "depth000035.png")

gt = "/content/gdrive/My Drive/epfl_lab/ground_truth_image_plane.yaml"
import pandas as pd
import yaml

with open(gt, 'r') as f:
    df = (yaml.load(f))
id_to_bboxes = {}    
for idx in df["20140804_160621_00"].keys():
  id_to_bboxes[idx] = []
  for bbox in df["20140804_160621_00"][idx].values():
     id_to_bboxes[int(idx)].append(bbox)
  # if idx not in id_to_bboxes:
  #   id_to_bboxes[idx] = []
  # else:
  #   print(df["20140804_160621_00"][idx])
  #   break

import os
import numpy as np
import torch
import torch.utils.data
from PIL import Image
class EPFLDataset(torch.utils.data.Dataset):
    def __init__(self, transforms=None):
        self.transforms = transforms

    def __getitem__(self, idx):
        idx += 34
        # load images ad masks
        img = Image.open(image_directory + "rgb"+ str(idx).zfill(6) + ".png").convert("RGB")
        boxes = id_to_bboxes[idx] if idx in id_to_bboxes else []
        num_objs = len(boxes)
        boxes_area = torch.as_tensor(boxes, dtype=torch.float32)
        labels = torch.ones((num_objs,), dtype=torch.int64)
        image_id = torch.tensor([idx])
        area = boxes_area[:, 3] * (boxes_area[:, 2])
        bbox = []
        for box in boxes:
            bbox.append([box[0],box[1],box[0] + box[2], box[1] + box[3]])
        bbox = torch.as_tensor(bbox,dtype=torch.float32)
        # suppose all instances are not crowd
        iscrowd = torch.zeros((num_objs,), dtype=torch.int64)
        target = {}
        target["boxes"] = bbox
        target["labels"] = labels
        target["image_id"] = image_id
        target["area"] = area
        target["iscrowd"] = iscrowd
        if self.transforms is not None:
            img, target = self.transforms(img, target)
        return img, target

    def __len__(self):
        return 916

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import matplotlib.patches as patches
# %matplotlib inline
e_dataset = EPFLDataset()
img, target = e_dataset[0]
fig,ax = plt.subplots(1)
ax.imshow(img)
for bbox in target["boxes"]:
    u,v,w,h = bbox
    rect = patches.Rectangle((u, v), w, h, linewidth=1, edgecolor='r', facecolor='none')
# Add the patch to the Axes
    ax.add_patch(rect)
plt.show()

dataset = EPFLDataset(None)
dataset[1]

area = dataset[0][1]["area"]
area[0].item()

#len(id_to_bboxes.keys())

import torchvision
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor

def get_model(num_classes):
  # load a model pre-trained pre-trained on COCO
  model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
  in_features = model.roi_heads.box_predictor.cls_score.in_features
  print(in_features)
  model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
  return model

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# 
# # Download TorchVision repo to use some files from
# # references/detection
# git clone https://github.com/pytorch/vision.git
# cd vision
# git checkout v0.3.0
# 
# cp references/detection/utils.py ../
# cp references/detection/transforms.py ../
# cp references/detection/coco_eval.py ../
# cp references/detection/engine.py ../
# cp references/detection/coco_utils.py ../

get_model(2)

import transforms as T
def get_transform(train):
    transforms = []
    # converts the image, a PIL image, into a PyTorch Tensor
    transforms.append(T.ToTensor())
    if train:
        # during training, randomly flip the training images
        # and ground-truth for data augmentation
        transforms.append(T.RandomHorizontalFlip(0.5))
    return T.Compose(transforms)

a=[1,2,3,4,5,6,7,8,9,10]
b = a[-1:]
c = a[:-1]
print(b,c)

from engine import train_one_epoch, evaluate
import utils

def main():
    # train on the GPU or on the CPU, if a GPU is not available
    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

    # our dataset has two classes only - background and person
    num_classes = 2
    # use our dataset and defined transformations
    dataset = EPFLDataset(get_transform(train=False))
    dataset_test = EPFLDataset( get_transform(train=False))
    # split the dataset in train and test set
    indices = torch.randperm(len(dataset)).tolist()
    print(len(indices))
    dataset = torch.utils.data.Subset(dataset, indices[:-100])
    dataset_test = torch.utils.data.Subset(dataset_test, indices[-100:])

    # define training and validation data loaders
    data_loader = torch.utils.data.DataLoader(
        dataset, batch_size=2, shuffle=True, num_workers=4,
        collate_fn=utils.collate_fn)

    data_loader_test = torch.utils.data.DataLoader(
        dataset_test, batch_size=1, shuffle=False, num_workers=4,
        collate_fn=utils.collate_fn)

    # get the model using our helper function
    model = get_model(num_classes)

    # move model to the right device
    model.to(device)

    # construct an optimizer
    params = [p for p in model.parameters() if p.requires_grad]
    optimizer = torch.optim.SGD(params, lr=0.005,
                                momentum=0.9, weight_decay=0.0005)
    # and a learning rate scheduler
    lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,
                                                   step_size=3,
                                                   gamma=0.1)

    # let's train it for 1 epochs
    num_epochs = 1

    for epoch in range(num_epochs):
        # train for one epoch, printing every 10 iterations
        train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq=10)
        # update the learning rate
        lr_scheduler.step()
        # evaluate on the test dataset
        evaluate(model, data_loader_test, device=device)

    print("That's it!")

main()

